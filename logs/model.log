2025-08-08 10:09:50,280 - __main__ - INFO - Starting Uvicorn server on 0.0.0.0:8000
INFO:     Started server process [10124]
INFO:     Waiting for application startup.
2025-08-08 10:09:50,288 - __main__ - INFO - ðŸš€ Server starting up...
2025-08-08 10:09:50,288 - __main__ - INFO - --- OLLAMA MODEL CHECK METRICS ---
2025-08-08 10:09:50,288 - __main__ - INFO - [Resources] Pre-Load  - CPU: 25.2%, RAM: 10.0%
2025-08-08 10:09:50,288 - __main__ - INFO - [Resources] Post-Load - CPU: 0.0%, RAM: 10.0%
2025-08-08 10:09:50,288 - __main__ - INFO - [Resources] Difference- CPU: -25.2%, RAM: +0.0%
2025-08-08 10:09:50,288 - __main__ - INFO - [Latency] Ollama model check complete in 0.00 seconds.
2025-08-08 10:09:50,288 - __main__ - INFO - -----------------------------
2025-08-08 10:09:50,288 - __main__ - INFO - âœ… Server is fully initialized and ready to accept requests.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:8000 (Press CTRL+C to quit)
2025-08-08 10:09:55,184 - __main__ - INFO - Received request on /v1/chat/stream
2025-08-08 10:09:55,198 - __main__ - INFO - Query: 
$[OpenAIChatMessage(role='system', content='You are Anton, an intelligent AI assistant that uses the ReAct (Reason-Act) pattern.\n\nYou can REASON about problems, take ACTIONS using tools, and provide RESPONSES to users.\n\nFor each turn, you should:\n1. REASON: Think about what you need to do\n2. ACT: Use tools if needed to gather information or perform actions  \n3. RESPOND: Provide a helpful response to the user\n\nFormat your responses as:\n\n<think>\nYour reasoning about what to do next...\n</think>\n\nThen either:\n- Use a tool if you need to gather information or perform an action\n- Provide a direct response if you have enough information\n\nYou have access to these capabilities:\n- File operations (read, write, list directories)\n- Access to your own source code via the file operations and embeddings\n- Persistent memory, including the ability to recall parts of past interactions using RAG\n- Code analysis and search\n- Web search \n- Knowledge retrieval\n\nYou have these capabilities with the following tools:\n[{\'type\': \'function\', \'function\': {\'name\': \'rebuild_code_index\', \'description\': \'Completely reset and rebuild the code index. This deletes the existing index first.\', \'parameters\': {\'type\': \'object\', \'properties\': {\'confirm\': {\'type\': \'boolean\', \'description\': \'Set to true to confirm the destructive rebuild operation.\'}}, \'required\': [\'confirm\']}}}, {\'type\': \'function\', \'function\': {\'name\': \'get_codebase_stats\', \'description\': "Get statistics about the agent\'s indexed codebase.", \'parameters\': {\'type\': \'object\', \'properties\': {\'refresh\': {\'type\': \'boolean\', \'description\': \'Whether to refresh the code index before returning stats. Defaults to false.\'}}}}}, {\'type\': \'function\', \'function\': {\'name\': \'list_directory\', \'description\': \'Lists files and subdirectories within a given path, ignoring anything in .gitignore.\', \'parameters\': {\'type\': \'object\', \'properties\': {\'path\': {\'type\': \'string\', \'description\': "The path to the directory, relative to the project root. Defaults to \'.\' (the project root)."}, \'recursive\': {\'type\': \'boolean\', \'description\': \'Whether to list contents recursively. Defaults to True.\'}}}}}, {\'type\': \'function\', \'function\': {\'name\': \'read_file\', \'description\': \'Reads the entire content of a specified file relative to the project root.\', \'parameters\': {\'type\': \'object\', \'properties\': {\'file_path\': {\'type\': \'string\', \'description\': \'The path to the file to be read, relative to the project root.\'}}, \'required\': [\'file_path\']}}}, {\'type\': \'function\', \'function\': {\'name\': \'write_file\', \'description\': \'Writes content to a file relative to the project root. Creates parent directories and overwrites the file if it exists.\', \'parameters\': {\'type\': \'object\', \'properties\': {\'file_path\': {\'type\': \'string\', \'description\': \'The path to the file, relative to the project root.\'}, \'content\': {\'type\': \'string\', \'description\': \'The full content to write to the file.\'}}, \'required\': [\'file_path\', \'content\']}}}, {\'type\': \'function\', \'function\': {\'name\': \'create_pull_request\', \'description\': "Creates a pull request on GitHub using the \'gh\' CLI.", \'parameters\': {\'type\': \'object\', \'properties\': {\'title\': {\'type\': \'string\', \'description\': \'The title of the pull request.\'}, \'body\': {\'type\': \'string\', \'description\': \'The body content of the pull request.\'}, \'head\': {\'type\': \'string\', \'description\': "The branch to merge from (e.g., \'feature-branch\')."}, \'base\': {\'type\': \'string\', \'description\': "The branch to merge into. Defaults to \'main\'."}}, \'required\': [\'title\', \'body\', \'head\']}}}, {\'type\': \'function\', \'function\': {\'name\': \'git_commit\', \'description\': \'Stages all modified files and commits them in a single step.\', \'parameters\': {\'type\': \'object\', \'properties\': {\'message\': {\'type\': \'string\', \'description\': \'The commit message.\'}, \'add_all\': {\'type\': \'boolean\', \'description\': \'If true, stages all changes (`git add .`) before committing. Defaults to true.\'}}, \'required\': [\'message\']}}}, {\'type\': \'function\', \'function\': {\'name\': \'git_create_branch\', \'description\': \'Creates a new branch in the Git repository.\', \'parameters\': {\'type\': \'object\', \'properties\': {\'branch_name\': {\'type\': \'string\', \'description\': \'The name of the branch to create.\'}}, \'required\': [\'branch_name\']}}}, {\'type\': \'function\', \'function\': {\'name\': \'git_push\', \'description\': \'Pushes committed changes to a remote repository.\', \'parameters\': {\'type\': \'object\', \'properties\': {\'branch\': {\'type\': \'string\', \'description\': \'The local branch to push.\'}, \'remote\': {\'type\': \'string\', \'description\': "The remote repository. Defaults to \'origin\'."}, \'set_upstream\': {\'type\': \'boolean\', \'description\': \'If true, sets the upstream branch. Defaults to false.\'}}, \'required\': [\'branch\']}}}, {\'type\': \'function\', \'function\': {\'name\': \'git_status\', \'description\': \'Checks the status of the Git repository to see modified or staged files.\', \'parameters\': {\'type\': \'object\', \'properties\': {}}}}, {\'type\': \'function\', \'function\': {\'name\': \'git_switch_branch\', \'description\': \'Switches to a different, existing branch.\', \'parameters\': {\'type\': \'object\', \'properties\': {\'branch_name\': {\'type\': \'string\', \'description\': \'The name of the branch to switch to.\'}}, \'required\': [\'branch_name\']}}}, {\'type\': \'function\', \'function\': {\'name\': \'check_learning_progress\', \'description\': "Returns metrics about the agent\'s learning progress and performance improvements over time.", \'parameters\': {\'type\': \'object\', \'properties\': {}}}}, {\'type\': \'function\', \'function\': {\'name\': \'execute_python_code\', \'description\': \'Executes a string of Python code in a secure Docker container and returns the output. IMPORTANT: This tool cannot save files or interact with the local file system. It is solely for running code and getting the results back.\', \'parameters\': {\'type\': \'object\', \'properties\': {\'code\': {\'type\': \'string\', \'description\': \'The raw Python code to be executed.\'}}, \'required\': [\'code\']}}}, {\'type\': \'function\', \'function\': {\'name\': \'search_codebase\', \'description\': "Search through the agent\'s codebase for relevant files or code snippets.", \'parameters\': {\'type\': \'object\', \'properties\': {\'query\': {\'type\': \'string\', \'description\': \'The search query related to code structure, functionality, or implementation details.\'}, \'max_results\': {\'type\': \'integer\', \'description\': \'Maximum number of code snippets to return. Defaults to 3.\'}}, \'required\': [\'query\']}}}]\n\nYou can call these tools using the following format:\n\n<tool_code>\n{"name" : "tool name", "arguments" : {"arg1" : "arg1_value", "arg2" : "arg2_value"}}\n</tool_code>\n<tool_code>\n{"name" : "tool name 2", "arguments" : {"arg1" : "arg1_value", "arg2" : "arg2_value"}}\n</tool_code>\n\nYou may use multiple tool calls, as long as no tool call relies on the output of another within the same turn.\n\nAlways think step by step and be helpful to the user.\n\nRelevant past knowledge:\n- """\nReAct (Reason-Act) Agent implementation that replaces the rigid Planner-Doer-Evaluator loop\nwith a more flexible single-agent model that decides next steps in a single LLM call.\n"""\nimport json\nim...\n- def get_react_system_prompt(self) -> str:\n        """Get the system prompt for the ReAct agent"""\n        return """You are Anton, an intelligent AI assistant that uses the ReAct (Reason-Act) pattern....\n', tool_calls=None, tool_call_id=None), OpenAIChatMessage(role='user', content='good morning anton', tool_calls=None, tool_call_id=None)]
INFO:     127.0.0.1:40192 - "POST /v1/chat/stream HTTP/1.1" 200 OK
2025-08-08 10:09:55,276 - httpx - INFO - HTTP Request: POST http://localhost:11434/api/chat "HTTP/1.1 200 OK"
2025-08-08 10:09:56,994 - __main__ - INFO - --- REQUEST METRICS ---
2025-08-08 10:09:56,994 - __main__ - INFO - [Latency] End-to-End: 1.81 seconds
2025-08-08 10:09:56,994 - __main__ - INFO - [Throughput] Chunks per Second: 105.01
2025-08-08 10:09:56,994 - __main__ - INFO - [Throughput] Total Chunks: 190
2025-08-08 10:09:56,994 - __main__ - INFO - [Resources] Start - CPU: 3.7%, RAM: 11.0%
2025-08-08 10:09:56,994 - __main__ - INFO - [Resources] End   - CPU: 6.5%, RAM: 11.0%
2025-08-08 10:09:56,994 - __main__ - INFO - -----------------------
