{"id": "anton_repo.-analyze-capability-with-llm", "type": "algorithm", "name": "_analyze_capability_with_llm", "summary": "An asynchronous method that analyzes a completed task using an LLM to identify demonstrated capabilities and updates the capability registry via `_register_capability_evidence`.", "formal": "async def _analyze_capability_with_llm(self, task: dict) -> None", "examples": [{"input": "task = {\"prompt\": \"Solve 2+2\", \"success\": true, \"actions\": [{\"type\": \"calculation\", \"details\": {\"result\": 4}}]}", "output": "Updates the capability registry with the analysis"}], "source": {"section_path": ["server/agent/learning_loop.py"], "pages": [1, 2, 3, 4, 5, 6, 7, 8, 9]}, "tags": ["anton_repo"], "confidence": 0.95, "synonyms": []}
{"id": "anton_repo.-call-llm-api", "type": "concept", "name": "_call_llm_api", "summary": "", "formal": "_call_llm_api(messages: List[Dict[str, str]]) → str", "examples": [], "source": {"section_path": ["server/agent/learning_loop.py"], "pages": [10, 11, 12, 13, 14, 15, 16]}, "tags": ["anton_repo"], "confidence": 0.95, "synonyms": []}
{"id": "anton_repo.-extract-json-from-response", "type": "concept", "name": "_extract_json_from_response", "summary": "", "formal": "_extract_json_from_response(response: str) → Dict", "examples": [], "source": {"section_path": ["server/agent/learning_loop.py"], "pages": [10, 11, 12, 13, 14, 15, 16]}, "tags": ["anton_repo"], "confidence": 0.95, "synonyms": []}
{"id": "anton_repo.-is-tool-class", "type": "rule", "name": "_is_tool_class", "summary": "Determines if a class is a valid tool by checking inheritance from BaseTool or presence of version attribute.", "formal": "def _is_tool_class(cls: Type) -> bool", "examples": [{"input": "_is_tool_class(MyToolClass)", "output": true}], "source": {"section_path": ["server/agent/tools/tool_loader.py"], "pages": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.-persist-to-rag", "type": "function", "name": "_persist_to_rag", "summary": "", "formal": null, "examples": [], "source": {"section_path": ["server/agent/knowledge_store.py"], "pages": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.-register-capability-evidence", "type": "algorithm", "name": "_register_capability_evidence", "summary": "An asynchronous method that registers capability evidence, updates confidence levels, and identifies the best evidence for each capability in the registry.", "formal": "async def _register_capability_evidence(self, capability_name: str, task: dict, confidence_level: str, evidence_text: str, approach_text: str, improvement_text: str) -> None", "examples": [{"input": "capability_name=\"math\", task={\"prompt\": \"Solve equation\", \"success\": true, ...}, confidence_level=\"MEDIUM\", evidence_text=\"Solved equation\", approach_text=\"Used formula\", improvement_text=\"Use more examples\"", "output": "Updates self.capabilities with new evidence and adjusted confidence"}], "source": {"section_path": ["server/agent/learning_loop.py"], "pages": [1, 2, 3, 4, 5, 6, 7, 8, 9]}, "tags": ["anton_repo"], "confidence": 0.95, "synonyms": []}
{"id": "anton_repo.-run-command", "type": "function", "name": "_run_command", "summary": "", "formal": "def _run_command(command: list[str]) -> str", "examples": [], "source": {"section_path": ["server/agent/tools/git.py"], "pages": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.-solve", "type": "function", "name": "_solve", "summary": "", "formal": null, "examples": [], "source": {"section_path": ["server/agent/self_study.py"], "pages": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.-solve-variant", "type": "function", "name": "_solve_variant", "summary": "", "formal": null, "examples": [], "source": {"section_path": ["server/agent/self_study.py"], "pages": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.-verify", "type": "function", "name": "_verify", "summary": "", "formal": null, "examples": [], "source": {"section_path": ["server/agent/self_study.py"], "pages": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.add-learning-action", "type": "function", "name": "add_learning_action", "summary": "", "formal": null, "examples": [], "source": {"section_path": ["server/agent/knowledge_store.py"], "pages": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.agentaction", "type": "definition", "name": "AgentAction", "summary": "Represents an agent's action with a string identifier and data payload. Fields are 'action' (str) and 'data' (list or str). Preserved for potential future use despite current non-usage.", "formal": "action: str, data: list | str", "examples": [{"input": {"action": "move", "data": "north"}, "output": "AgentAction(action='move', data='north')"}], "source": {"section_path": ["server/agent/models.py"], "pages": [1, 2]}, "tags": ["anton_repo"], "confidence": 0.95, "synonyms": []}
{"id": "anton_repo.anton-prompt", "type": "definition", "name": "Anton Prompt", "summary": "General system prompt for the main assistant, used as a fixed message to define the assistant's behavior.", "formal": "No placeholders; fixed string: 'You are a helpful assistant.'", "examples": [{"input": "User: What is the capital of France?", "output": "The capital of France is Paris."}], "source": {"section_path": ["prompts.py"], "pages": [1]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.antonclient", "type": "definition", "name": "AntonClient", "summary": "Client class for the Anton service, providing an asynchronous stream_response method for generating responses.", "formal": "class AntonClient:\n    async def stream_response(user_prompt: str, chat_history: List[Dict]) -> AsyncIterator[Dict]", "examples": [], "source": {"section_path": ["app.py"], "pages": [1, 2, 3]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.antonclient-stream-response", "type": "algorithm", "name": "AntonClient stream_response", "summary": "", "formal": "async for chunk in AntonClient.stream_response(user_prompt: str) -> dict: {\"content\": str, \"type\": Literal[\"token\", \"info\", \"error\"]}", "examples": [{"input": "client.stream_response(user_prompt=\"Test prompt\")", "output": "{\"content\": \"Hello\", \"type\": \"token\"}"}], "source": {"section_path": ["client/main.py"], "pages": [1, 2]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.api-base-url", "type": "definition", "name": "API Base URL", "summary": "Centralized base URL for Anton agent server API endpoints. Allows environment-specific configuration without code changes.", "formal": "str", "examples": [{"input": "API_BASE_URL", "output": "http://192.168.1.250:8001"}], "source": {"section_path": ["client/config.py"], "pages": [1]}, "tags": ["anton_repo"], "confidence": 0.95, "synonyms": []}
{"id": "anton_repo.application-logging-policy", "type": "rule", "name": "Application Logging Policy", "summary": "", "formal": "logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'); logging.getLogger(\"httpx\").setLevel(logging.WARNING)", "examples": [{"input": "logging.basicConfig(...); logging.getLogger(\"httpx\").setLevel(logging.WARNING)", "output": "httpx logging level set to WARNING"}], "source": {"section_path": ["client/main.py"], "pages": [1, 2]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.blockrecord", "type": "dataclass", "name": "BlockRecord", "summary": "", "formal": null, "examples": [{"input": "Content with metadata", "output": "BlockRecord instance"}], "source": {"section_path": ["learning/pdf_importer.py"], "pages": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.bob", "type": "concept", "name": "Bob", "summary": "", "formal": null, "examples": [], "source": {"section_path": ["server/agent/tools/base_tool.py"], "pages": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.build-context-summary", "type": "function", "name": "build_context_summary", "summary": "", "formal": null, "examples": [], "source": {"section_path": ["server/agent/knowledge_store.py"], "pages": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.build-domain-knowledge-context", "type": "function", "name": "build_domain_knowledge_context", "summary": "", "formal": null, "examples": [], "source": {"section_path": ["server/agent/knowledge_store.py"], "pages": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.capability-domain-matching", "type": "algorithm", "name": "Capability Domain Matching", "summary": "Matches a capability name to a standard domain using direct, fuzzy substring, and keyword matching. Returns the matched domain or None if no match is found.", "formal": "def _match_capability_domain(capability_name: str) -> Optional[str]", "examples": [{"input": "generate_code", "output": "code_generation"}], "source": {"section_path": ["server/agent/learning_loop.py"], "pages": [17, 18, 19]}, "tags": ["anton_repo"], "confidence": 0.95, "synonyms": []}
{"id": "anton_repo.capabilityconfidence", "type": "definition", "name": "CapabilityConfidence", "summary": "An enumeration representing confidence levels for capability demonstrations, with values LOW, MEDIUM, and HIGH.", "formal": "enum CapabilityConfidence { LOW, MEDIUM, HIGH }", "examples": [], "source": {"section_path": ["server/agent/learning_loop.py"], "pages": [1, 2, 3, 4, 5, 6, 7, 8, 9]}, "tags": ["anton_repo"], "confidence": 0.95, "synonyms": []}
{"id": "anton_repo.classify-block", "type": "function", "name": "classify_block", "summary": "", "formal": null, "examples": [{"input": "Theorem: Pythagoras", "output": "theorem"}], "source": {"section_path": ["learning/pdf_importer.py"], "pages": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.closeconnection", "type": "algorithm", "name": "CloseConnection", "summary": "", "formal": null, "examples": [{"input": "await client.close()", "output": "api_client session closed"}], "source": {"section_path": ["client/anton_client.py"], "pages": [1, 2, 3]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.code-reviewer-analysis-prompt", "type": "definition", "name": "Code Reviewer Analysis Prompt", "summary": "Template for the code reviewer agent to provide a structured JSON review with detailed feedback.", "formal": "Requires {code}, {file_path}, {reviewer_notes}; output must be a JSON object with keys 'suggestions', 'critical_issues', 'code_quality_score'.", "examples": [{"input": {"code": "def add(a, b): return a + b", "file_path": "math_utils.py", "reviewer_notes": "Good function, but no docstring or type hints."}, "output": "{\"suggestions\": [\"Add docstring\", \"Add type hints\"], \"critical_issues\": [], \"code_quality_score\": 8}"}], "source": {"section_path": ["prompts.py"], "pages": [1]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.code-reviewer-prompt", "type": "definition", "name": "Code Reviewer Prompt", "summary": "General prompt for the code reviewer agent to provide feedback on code quality, used as a fixed message.", "formal": "No specific placeholders; fixed string describing the task.", "examples": [{"input": "Code: def add(a, b): return a + b", "output": "The function is correct and well-structured. Consider adding type hints for clarity."}], "source": {"section_path": ["prompts.py"], "pages": [1]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.codeindexer", "type": "definition", "name": "CodeIndexer", "summary": "A class for managing file indexing operations, including indexing directories, refreshing the index via Git, and retrieving statistics.", "formal": "CodeIndexer", "examples": [], "source": {"section_path": ["server/agent/code_indexer.py"], "pages": [9, 10, 11, 12, 13]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.codeindexrefresher", "type": "definition", "name": "CodeIndexRefresher", "summary": "Background service that refreshes the code index at a configurable interval using a dedicated thread.", "formal": "class CodeIndexRefresher(refresh_interval_hours: float = 24.0)", "examples": [], "source": {"section_path": ["server/agent/code_index_refresher.py"], "pages": [1, 2, 3, 4, 5, 6, 7]}, "tags": ["anton_repo"], "confidence": 0.95, "synonyms": []}
{"id": "anton_repo.codesearchtool-api-contract", "type": "definition", "name": "CodeSearchTool API Contract", "summary": "Specifies the structure of the code search API, requiring a 'query' string and allowing an optional 'max_results' integer with default 3.", "formal": "parameters: { query: string (required), max_results: integer (default 3) }", "examples": [], "source": {"section_path": ["server/agent/tools/code_search.py"], "pages": [1, 2]}, "tags": ["anton_repo"], "confidence": 0.95, "synonyms": ["API schema", "function definition"]}
{"id": "anton_repo.codesearchtoolrun", "type": "function", "name": "CodeSearchTool.run", "summary": "Executes code search by querying the codebase with a required 'query' string and optional 'max_results' parameter, formatting results with text truncation, and handling missing query errors.", "formal": "def run(self, arguments: dict) -> str", "examples": [], "source": {"section_path": ["server/agent/tools/code_search.py"], "pages": [1, 2]}, "tags": ["anton_repo"], "confidence": 0.95, "synonyms": ["search_exec", "code_query"]}
{"id": "anton_repo.complete-learning-task", "type": "function", "name": "complete_learning_task", "summary": "", "formal": null, "examples": [], "source": {"section_path": ["server/agent/knowledge_store.py"], "pages": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.contextitem", "type": "dataclass", "name": "ContextItem", "summary": "", "formal": null, "examples": [], "source": {"section_path": ["server/agent/knowledge_store.py"], "pages": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.contexttype", "type": "enum", "name": "ContextType", "summary": "", "formal": null, "examples": [], "source": {"section_path": ["server/agent/knowledge_store.py"], "pages": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.create-tool-instances", "type": "algorithm", "name": "create_tool_instances", "summary": "Creates and returns instances of all discovered tools.", "formal": "def create_tool_instances(self) -> Dict[str, BaseTool]", "examples": [{"input": "create_tool_instances()", "output": {"tool1": "instance1", "tool2": "instance2"}}], "source": {"section_path": ["server/agent/tools/tool_loader.py"], "pages": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.deduplicate-keep-order", "type": "algorithm", "name": "Deduplicate Keep Order", "summary": "Removes duplicates from a list while preserving order.", "formal": "def _dedupe_keep_order(items: List[str]) -> List[str]", "examples": [{"input": ["a", "b", "a"], "output": ["a", "b"]}], "source": {"section_path": ["server/agent/concept_graph.py"], "pages": [1, 2, 3, 4]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.deduplicate-nodes", "type": "concept", "name": "Deduplicate Nodes", "summary": "", "formal": null, "examples": [], "source": {"section_path": ["learning/concept_extractor.py"], "pages": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.default-temperature", "type": "definition", "name": "Default Temperature", "summary": "Default temperature parameter for agent chat completions, controlling response randomness.", "formal": "float", "examples": [{"input": "DEFAULT_TEMPERATURE", "output": "0.6"}], "source": {"section_path": ["client/config.py"], "pages": [1]}, "tags": ["anton_repo"], "confidence": 0.95, "synonyms": []}
{"id": "anton_repo.default-timeout", "type": "definition", "name": "Default Timeout", "summary": "Default timeout duration for API requests in seconds, set to 300.0 seconds (5 minutes).", "formal": "float", "examples": [{"input": "DEFAULT_TIMEOUT", "output": "300.0"}], "source": {"section_path": ["client/config.py"], "pages": [1]}, "tags": ["anton_repo"], "confidence": 0.95, "synonyms": []}
{"id": "anton_repo.detect-headers-footers", "type": "function", "name": "detect_headers_footers", "summary": "", "formal": null, "examples": [{"input": "PDF document", "output": "{ 'headers': { 'page1': 'Header1' }, 'footers': { 'page1': 'Footer1' } }"}], "source": {"section_path": ["learning/pdf_importer.py"], "pages": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.discover-tools", "type": "algorithm", "name": "discover_tools", "summary": "Dynamically discovers and returns a mapping of tool names to their classes.", "formal": "def discover_tools(self) -> Dict[str, Type[BaseTool]]", "examples": [{"input": "discover_tools()", "output": {"tool1": "BaseTool", "tool2": "BaseTool"}}], "source": {"section_path": ["server/agent/tools/tool_loader.py"], "pages": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.domain-keyword-matching", "type": "algorithm", "name": "Domain Keyword Matching", "summary": "Identifies capability domains from a user prompt using case-insensitive keyword matching against predefined domain keyword sets. Returns a list of matching domains.", "formal": "def _identify_potential_capabilities(prompt: str) -> List[str]", "examples": [{"input": "How to read a file?", "output": ["file_operations"]}], "source": {"section_path": ["server/agent/learning_loop.py"], "pages": [17, 18, 19]}, "tags": ["anton_repo"], "confidence": 0.95, "synonyms": []}
{"id": "anton_repo.domain-verifier-registration", "type": "algorithm", "name": "Domain Verifier Registration", "summary": "Registers a verifier function for a specific domain using a decorator. Domain names are normalized to lowercase. The registry maps domains to lists of verifiers.", "formal": "def register(domain: str) -> Callable[[Callable[[VerifyRequest], Optional[VerifyResult]], ...]]", "examples": [{"input": "@register('example.com')\ndef verify(req: VerifyRequest) -> VerifyResult: ...", "output": "Verifier added to registry for 'example.com'"}], "source": {"section_path": ["server/agent/verifiers/base.py"], "pages": [1, 2, 3, 4]}, "tags": ["anton_repo"], "confidence": 0.9, "synonyms": ["Domain Registration Decorator", "Verifier Registration"]}
{"id": "anton_repo.edge", "type": "definition", "name": "Edge", "summary": "", "formal": null, "examples": [], "source": {"section_path": ["learning/concept_extractor.py"], "pages": [18, 19, 20, 21]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.emit-blocks", "type": "function", "name": "emit_blocks", "summary": "", "formal": null, "examples": [{"input": "Section roots and blocks", "output": "Generated output (e.g., formatted text)"}], "source": {"section_path": ["learning/pdf_importer.py"], "pages": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.execute-tool-async", "type": "algorithm", "name": "Execute Tool Async", "summary": "Asynchronous tool execution using thread pool for blocking operations. Returns result as string.", "formal": "def execute_tool_async(tool_name: str, tool_args: dict, logger) -> str", "examples": [{"input": "tool_name='search', tool_args={'query': 'test'}, logger=logger", "output": "\"search result\""}], "source": {"section_path": ["server/agent/tool_executor.py"], "pages": [1, 2, 3]}, "tags": ["anton_repo"], "confidence": 0.95, "synonyms": []}
{"id": "anton_repo.execute-tool-sync", "type": "algorithm", "name": "Execute Tool Sync", "summary": "Synchronous tool execution for backward compatibility. Directly calls tool_manager.run_tool and returns JSON string.", "formal": "def execute_tool(tool_name: str, tool_args: dict, logger) -> str", "examples": [{"input": "tool_name='search', tool_args={'query': 'test'}, logger=logger", "output": "{\"result\": \"search\"}"}], "source": {"section_path": ["server/agent/tool_executor.py"], "pages": [1, 2, 3]}, "tags": ["anton_repo"], "confidence": 0.9, "synonyms": []}
{"id": "anton_repo.executepythoncode-run-method", "type": "algorithm", "name": "ExecutePythonCode Run Method", "summary": "Executes Python code in a secure Docker container, handling inputs and returning output.", "formal": null, "examples": [{"input": {"code": "print(42)"}, "output": "42"}], "source": {"section_path": ["server/agent/tools/coding.py"], "pages": [1, 2]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.executepythoncode-tool-schema", "type": "definition", "name": "ExecutePythonCode Tool Schema", "summary": "Schema for the tool's input parameters, requiring a 'code' string.", "formal": "{\"type\": \"function\", \"function\": {\"name\": \"execute_python_code\", \"description\": \"A tool for executing Python code in a secure container.\", \"parameters\": {\"type\": \"object\", \"properties\": {\"code\": {\"type\": \"string\", \"description\": \"The raw Python code to be executed.\"}}, \"required\": [\"code\"]}}}", "examples": [{"input": {"code": "print(42)"}, "output": {"code": "print(42)"}}], "source": {"section_path": ["server/agent/tools/coding.py"], "pages": [1, 2]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.executor-prompt", "type": "definition", "name": "Executor Prompt", "summary": "Template for the executor agent to perform actions based on instructions, used as a fixed message.", "formal": "No specific placeholders; fixed string.", "examples": [{"input": "Action: book a flight to Paris", "output": "Flight to Paris booked successfully."}], "source": {"section_path": ["prompts.py"], "pages": [1]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.expand-nodes", "type": "algorithm", "name": "Expand Nodes", "summary": "Expands node IDs using adjacency graph up to a maximum depth.", "formal": "def expand_nodes(node_ids: List[str], adj: Dict[str, Dict[str, List[str]]], nodes: Dict[str, Dict[str, Any]], max_depth: int = 1) -> List[str]", "examples": [{"input": "['node1'], adj, nodes, 2", "output": ["node1", "node2", "node3"]}], "source": {"section_path": ["server/agent/concept_graph.py"], "pages": [1, 2, 3, 4]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.explicit-save-policy", "type": "rule", "name": "Explicit Save Policy", "summary": "Knowledge addition via add_knowledge() does not persist to disk; explicit save() call is required for persistence.", "formal": "add_knowledge(...) → requires save()", "examples": [{"input": "add_knowledge('text', 'source')", "output": "Document store updated; no disk save until save() is called"}], "source": {"section_path": ["server/agent/rag_manager.py"], "pages": [1, 2, 3, 4, 5, 6, 7, 8, 9]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.extract-toc-sections", "type": "function", "name": "extract_toc_sections", "summary": "", "formal": null, "examples": [{"input": "PDF with ToC", "output": "List of section roots (e.g., [SectionNode, ...])"}], "source": {"section_path": ["learning/pdf_importer.py"], "pages": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.final-answer-detection", "type": "rule", "name": "Final Answer Detection", "summary": "Breaks the loop if the response contains the string \"Final Answer\".", "formal": "if \"Final Answer\" in response: break", "examples": [{"input": "The final answer is 42.", "output": "break"}], "source": {"section_path": ["server/agent/react_agent.py"], "pages": [4, 5]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.find-git-root", "type": "function", "name": "find_git_root", "summary": "", "formal": "def find_git_root() -> str", "examples": [], "source": {"section_path": ["server/agent/tools/git.py"], "pages": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.force-refresh", "type": "algorithm", "name": "force_refresh", "summary": "Immediately triggers a refresh of the code index, bypassing the interval.", "formal": "def force_refresh(self) -> None", "examples": [{"input": "refresher.force_refresh()", "output": "None"}], "source": {"section_path": ["server/agent/code_index_refresher.py"], "pages": [1, 2, 3, 4, 5, 6, 7]}, "tags": ["anton_repo"], "confidence": 0.95, "synonyms": []}
{"id": "anton_repo.format-context", "type": "algorithm", "name": "Format Context", "summary": "Formats node metadata into a readable string context.", "formal": "def format_context(nodes_by_id: Dict[str, Dict[str, Any]], max_nodes: int = 10) -> str", "examples": [{"input": "nodes_by_id, 5", "output": "Node 1: {meta}, Node 2: {meta}"}], "source": {"section_path": ["server/agent/concept_graph.py"], "pages": [1, 2, 3, 4]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.get-all-resource-usage", "type": "algorithm", "name": "get_all_resource_usage", "summary": "Captures current CPU and RAM usage percentages, with a placeholder for GPU stats (which is always an empty list in this implementation).", "formal": "def get_all_resource_usage(logger: logging.Logger) -> dict", "examples": [{"input": "logger", "output": "{\"cpu_percent\": 25.3, \"ram_percent\": 45.8, \"gpus\": []}"}], "source": {"section_path": ["server/model_server.py"], "pages": [1, 2, 3, 4]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.get-all-tools", "type": "algorithm", "name": "Get All Tools", "summary": "Dynamically discovers and returns all tool instances, combining legacy wrappers and new tools via ToolLoader.", "formal": "def get_all_tools() -> List[Any]", "examples": [{"input": "get_all_tools()", "output": "['SearchTool', 'Calculator']"}], "source": {"section_path": ["server/agent/tools/tool_defs.py"], "pages": [1, 2, 3, 4]}, "tags": ["anton_repo"], "confidence": 0.9, "synonyms": []}
{"id": "anton_repo.get-capabilities-by-confidence", "type": "concept", "name": "get_capabilities_by_confidence", "summary": "", "formal": "get_capabilities_by_confidence(confidence: CapabilityConfidence) → List[Dict]", "examples": [], "source": {"section_path": ["server/agent/learning_loop.py"], "pages": [10, 11, 12, 13, 14, 15, 16]}, "tags": ["anton_repo"], "confidence": 0.95, "synonyms": []}
{"id": "anton_repo.get-capability-evidence", "type": "concept", "name": "get_capability_evidence", "summary": "", "formal": "get_capability_evidence(capability_id: str) → Dict", "examples": [], "source": {"section_path": ["server/agent/learning_loop.py"], "pages": [10, 11, 12, 13, 14, 15, 16]}, "tags": ["anton_repo"], "confidence": 0.95, "synonyms": []}
{"id": "anton_repo.get-codebase-stats", "type": "algorithm", "name": "get_codebase_stats", "summary": "API for retrieving codebase statistics with optional index refresh. Returns a formatted string detailing file counts, extensions, and index status. Handles errors by returning error messages.", "formal": "def get_codebase_stats(refresh: bool = False) -> str", "examples": [{"input": {"refresh": true}, "output": "📊 Codebase Statistics (Refreshed code index: 0 files updated.)"}], "source": {"section_path": ["server/agent/tools/code_stats.py"], "pages": [1, 2]}, "tags": ["anton_repo"], "confidence": 0.95, "synonyms": ["CodebaseStatsAPI"]}
{"id": "anton_repo.get-indexed-files-count", "type": "algorithm", "name": "get_indexed_files_count", "summary": "Returns the number of files currently indexed, based on the length of the indexed_files_meta list.", "formal": "get_indexed_files_count(self) -> int", "examples": [], "source": {"section_path": ["server/agent/code_indexer.py"], "pages": [9, 10, 11, 12, 13]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.get-performance-report", "type": "concept", "name": "get_performance_report", "summary": "", "formal": "get_performance_report() → Dict", "examples": [], "source": {"section_path": ["server/agent/learning_loop.py"], "pages": [10, 11, 12, 13, 14, 15, 16]}, "tags": ["anton_repo"], "confidence": 0.95, "synonyms": []}
{"id": "anton_repo.get-prioritized-context", "type": "function", "name": "get_prioritized_context", "summary": "", "formal": null, "examples": [], "source": {"section_path": ["server/agent/knowledge_store.py"], "pages": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.get-relevant-learnings", "type": "concept", "name": "get_relevant_learnings", "summary": "", "formal": "get_relevant_learnings(query: str) → List[Dict]", "examples": [], "source": {"section_path": ["server/agent/learning_loop.py"], "pages": [10, 11, 12, 13, 14, 15, 16]}, "tags": ["anton_repo"], "confidence": 0.95, "synonyms": []}
{"id": "anton_repo.get-stats", "type": "algorithm", "name": "get_stats", "summary": "Returns a dictionary containing statistics about the indexed files, including total count and number of indexed files.", "formal": "get_stats(self) -> dict", "examples": [], "source": {"section_path": ["server/agent/code_indexer.py"], "pages": [9, 10, 11, 12, 13]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.get-status", "type": "algorithm", "name": "get_status", "summary": "Returns the current status of the background refresh service.", "formal": "def get_status(self) -> str", "examples": [{"input": "refresher.get_status()", "output": "running"}], "source": {"section_path": ["server/agent/code_index_refresher.py"], "pages": [1, 2, 3, 4, 5, 6, 7]}, "tags": ["anton_repo"], "confidence": 0.95, "synonyms": []}
{"id": "anton_repo.get-tools-by-capability", "type": "algorithm", "name": "get_tools_by_capability", "summary": "Filters tools by capability, returning instances that support the specified capability.", "formal": "def get_tools_by_capability(self, capability: ToolCapability) -> Dict[str, BaseTool]", "examples": [{"input": "get_tools_by_capability(capability=ToolCapability.V1)", "output": {"tool1": "instance1"}}], "source": {"section_path": ["server/agent/tools/tool_loader.py"], "pages": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.get-tools-by-pattern", "type": "algorithm", "name": "Get Tools By Pattern", "summary": "Filters tool instances based on pattern matching against tool names or capabilities.", "formal": "def get_tools_by_pattern(pattern: str) -> List[Any]", "examples": [{"input": "get_tools_by_pattern('search')", "output": "['SearchTool']"}], "source": {"section_path": ["server/agent/tools/tool_defs.py"], "pages": [1, 2, 3, 4]}, "tags": ["anton_repo"], "confidence": 0.9, "synonyms": []}
{"id": "anton_repo.git-root-dir", "type": "variable", "name": "GIT_ROOT_DIR", "summary": "", "formal": "str", "examples": [], "source": {"section_path": ["server/agent/tools/git.py"], "pages": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.gitstatustoolfunction", "type": "definition", "name": "GitStatusTool.function", "summary": "", "formal": "dict: {'name': 'git_status', 'description': 'Shows the current status of the Git repository.', 'parameters': {}}", "examples": [], "source": {"section_path": ["server/agent/tools/git.py"], "pages": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.gitstatustoolrun", "type": "method", "name": "GitStatusTool.run", "summary": "", "formal": "def run(self, arguments: dict) -> str", "examples": [], "source": {"section_path": ["server/agent/tools/git.py"], "pages": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.importancelevel", "type": "enum", "name": "ImportanceLevel", "summary": "", "formal": null, "examples": [], "source": {"section_path": ["server/agent/knowledge_store.py"], "pages": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.index-directory", "type": "algorithm", "name": "index_directory", "summary": "Indexes all files in a specified directory by calling index_file on each file and returning the count of successfully indexed files.", "formal": "index_directory(self, path: str) -> int", "examples": [], "source": {"section_path": ["server/agent/code_indexer.py"], "pages": [9, 10, 11, 12, 13]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.index-rebuild", "type": "algorithm", "name": "Index Rebuild", "summary": "Rebuilds the FAISS index from the current document store, removing orphaned vectors.", "formal": "def rebuild_index(self) -> int", "examples": [{"input": "rebuild_index()", "output": "New index vector count returned"}], "source": {"section_path": ["server/agent/rag_manager.py"], "pages": [1, 2, 3, 4, 5, 6, 7, 8, 9]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.infer-sections-by-font", "type": "function", "name": "infer_sections_by_font", "summary": "", "formal": null, "examples": [{"input": "PDF without ToC", "output": "List of inferred section roots"}], "source": {"section_path": ["learning/pdf_importer.py"], "pages": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.internal-import-convention", "type": "rule", "name": "Internal Import Convention", "summary": "Internal module imports must use underscore-prefixed aliases to indicate non-public usage. This convention prevents accidental external usage and aligns with Python naming standards.", "formal": "from . import [module] as _[module]", "examples": [{"input": "from . import calc_sympy", "output": "from . import calc_sympy as _calc_sympy"}], "source": {"section_path": ["server/agent/verifiers/__init__.py"], "pages": [1]}, "tags": ["anton_repo"], "confidence": 0.9, "synonyms": ["Underscore Alias Convention", "Private Import Convention"]}
{"id": "anton_repo.jane", "type": "concept", "name": "Jane", "summary": "", "formal": null, "examples": [], "source": {"section_path": ["server/agent/tools/base_tool.py"], "pages": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.john", "type": "concept", "name": "John", "summary": "", "formal": null, "examples": [], "source": {"section_path": ["server/agent/tools/base_tool.py"], "pages": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.learningloop", "type": "definition", "name": "LearningLoop", "summary": "The main class managing the learning loop of an AI system, tracking capability demonstrations and updating the knowledge base through user interactions.", "formal": "class LearningLoop", "examples": [], "source": {"section_path": ["server/agent/learning_loop.py"], "pages": [1, 2, 3, 4, 5, 6, 7, 8, 9]}, "tags": ["anton_repo"], "confidence": 0.9, "synonyms": []}
{"id": "anton_repo.list-tool-files", "type": "algorithm", "name": "list_tool_files", "summary": "Returns a list of valid tool filenames from the configured directory.", "formal": "def list_tool_files(self) -> List[str]", "examples": [{"input": "list_tool_files()", "output": ["tool1", "tool2"]}], "source": {"section_path": ["server/agent/tools/tool_loader.py"], "pages": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.listdirectory-api", "type": "algorithm", "name": "ListDirectory API", "summary": "Lists directory contents respecting .gitignore rules, with optional recursion.", "formal": "def list_directory(path: str = '.', recursive: bool = True) -> str", "examples": [{"input": {"path": "data", "recursive": true}, "output": "file1\nfile2\ndir1/"}], "source": {"section_path": ["server/agent/tools/file_management.py"], "pages": [1, 2, 3, 4, 5]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.llm-request-executor", "type": "algorithm", "name": "LLM Request Executor", "summary": "Executes an LLM request with streaming response handling, using Ollama API (without tools parameter).", "formal": "async def _execute_llm_request(messages: List[Dict[str, str]], logger: Any) -> AsyncGenerator[str, None]", "examples": [{"input": "[{\"role\": \"user\", \"content\": \"Hello\"}]", "output": "Hello"}], "source": {"section_path": ["server/agent/react_agent.py"], "pages": [4, 5]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.load-pack", "type": "algorithm", "name": "Load Pack", "summary": "Loads adjacency graph and node metadata from disk storage in JSON format.", "formal": "def load_pack(pack_dir: str) -> Tuple[Dict[str, Dict[str, List[str]]], Dict[str, Dict[str, Any]]]", "examples": [{"input": "data/pack", "output": "adj: {...}, nodes: {...}"}], "source": {"section_path": ["server/agent/concept_graph.py"], "pages": [1, 2, 3, 4]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.log-final-metrics", "type": "algorithm", "name": "Log Final Metrics", "summary": "Calculates and logs all final metrics including end-to-end latency, step latencies, token throughput, resource usage, and task completion status.", "formal": "def log_final_metrics(self)", "examples": [{"input": "metrics_tracker.log_final_metrics()", "output": "[Latency] End-to-End: 1.23 seconds"}], "source": {"section_path": ["metrics.py"], "pages": [1, 2, 3, 4, 5]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.main", "type": "function", "name": "main", "summary": "", "formal": null, "examples": [{"input": "Input PDF", "output": "Processed output document"}], "source": {"section_path": ["learning/pdf_importer.py"], "pages": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.metrics-collecting-stream-generator", "type": "algorithm", "name": "metrics_collecting_stream_generator", "summary": "A generator function that wraps an Ollama stream and collects metrics (including resource usage at start and end) for event streaming.", "formal": "def metrics_collecting_stream_generator(ollama_stream: AsyncGenerator[dict, None], metrics: MetricsTracker) -> AsyncGenerator[str, None]", "examples": [{"input": "actual_ollama_stream_generator, metrics", "output": "AsyncGenerator[str, None] (streaming events with embedded metrics)"}], "source": {"section_path": ["server/model_server.py"], "pages": [1, 2, 3, 4]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.metricstracker", "type": "definition", "name": "MetricsTracker", "summary": "Tracks performance metrics for a single request, including latencies, token counts, resource snapshots, and task completion status.", "formal": null, "examples": [], "source": {"section_path": ["metrics.py"], "pages": [1, 2, 3, 4, 5]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.node", "type": "definition", "name": "Node", "summary": "", "formal": null, "examples": [], "source": {"section_path": ["learning/concept_extractor.py"], "pages": [18, 19, 20, 21]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.normalize-edges", "type": "concept", "name": "Normalize Edges", "summary": "", "formal": null, "examples": [], "source": {"section_path": ["learning/concept_extractor.py"], "pages": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.normalize-extractor-json", "type": "algorithm", "name": "normalize_extractor_json", "summary": "", "formal": null, "examples": [], "source": {"section_path": ["learning/concept_extractor.py"], "pages": [18, 19, 20, 21]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.normalize-text", "type": "function", "name": "normalize_text", "summary": "", "formal": null, "examples": [{"input": "  Hello   world!  \n\nThis is a test. \n\n", "output": "Hello world!\nThis is a test."}], "source": {"section_path": ["learning/pdf_importer.py"], "pages": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.nvml-initialize", "type": "algorithm", "name": "NVML Initialize", "summary": "Initializes the NVML library for GPU monitoring, setting a global flag and logging success or failure.", "formal": "def initialize_nvml(logger: Any)", "examples": [{"input": "initialize_nvml(logger)", "output": "NVML initialized successfully."}], "source": {"section_path": ["metrics.py"], "pages": [1, 2, 3, 4, 5]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.on-chat-start", "type": "algorithm", "name": "on_chat_start", "summary": "Handler for the start of a new chat session, initializing the user session with an AntonClient instance and empty chat history.", "formal": null, "examples": [{"input": "New chat session", "output": "Session initialized: 'anton' (AntonClient instance), 'chat_history' = []"}], "source": {"section_path": ["app.py"], "pages": [1, 2, 3]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.on-message", "type": "algorithm", "name": "on_message", "summary": "Handler for user messages, using AntonClient to generate responses and displaying a 'Thinking' step.", "formal": null, "examples": [{"input": "User message", "output": "Response generated via AntonClient, displayed in 'Thinking' step"}], "source": {"section_path": ["app.py"], "pages": [1, 2, 3]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.orchestrator-prompt", "type": "definition", "name": "Orchestrator Prompt", "summary": "Template for the orchestrator agent to coordinate between multiple agents and manage the workflow.", "formal": "Requires {current_state}, {next_step}, {agents}; output must be a coordination message.", "examples": [{"input": {"current_state": "Waiting for planner", "next_step": "Execute booking", "agents": "planner, executor"}, "output": "Planner has provided a step; executor will now book the flight."}], "source": {"section_path": ["prompts.py"], "pages": [1]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.page-text-without-header-footer", "type": "function", "name": "page_text_without_header_footer", "summary": "", "formal": null, "examples": [{"input": "Page text, headers, footers", "output": "Cleaned page text"}], "source": {"section_path": ["learning/pdf_importer.py"], "pages": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.parse-args", "type": "function", "name": "parse_args", "summary": "", "formal": null, "examples": [], "source": {"section_path": ["server/agent/self_study.py"], "pages": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.path-resolution-algorithm", "type": "algorithm", "name": "Path Resolution Algorithm", "summary": "Prevents path traversal attacks by normalizing paths and ensuring they remain within the PROJECT_ROOT directory.", "formal": "def _resolve_path(user_path: str) -> str", "examples": [{"input": "data/file.txt", "output": "/project_root/data/file.txt"}], "source": {"section_path": ["server/agent/tools/file_management.py"], "pages": [1, 2, 3, 4, 5]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.planner-prompt", "type": "definition", "name": "Planner Prompt", "summary": "Template for the planner agent to decompose user requests into a single actionable step for other agents, or 'DONE' if complete.", "formal": "Requires {original_prompt}, {tools}, {chat_history}, {completed_steps_summary}; output must be a single step string or 'DONE'.", "examples": [{"input": {"original_prompt": "Plan a trip to Paris", "tools": "book_flight, book_hotel", "chat_history": "User: Plan a trip to Paris", "completed_steps_summary": "Booked flight to Paris"}, "output": "Book a hotel in Paris"}], "source": {"section_path": ["prompts.py"], "pages": [1]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.process-chunk", "type": "algorithm", "name": "process_chunk", "summary": "", "formal": null, "examples": [], "source": {"section_path": ["learning/concept_extractor.py"], "pages": [18, 19, 20, 21]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.process-tool-calls", "type": "algorithm", "name": "Process Tool Calls", "summary": "Parses tool calls from response buffer, executes via async method, updates knowledge store, and streams results via callback.", "formal": "async def process_tool_calls(response_buffer: str, tool_call_regex: Any, messages: list[dict], logger: Any, knowledge_store: Any = None, result_callback: Any = None) -> bool", "examples": [{"input": "response_buffer='call search', tool_call_regex=regex, messages=[{'role': 'user', 'content': 'search'}], logger=logger", "output": "True"}], "source": {"section_path": ["server/agent/tool_executor.py"], "pages": [1, 2, 3]}, "tags": ["anton_repo"], "confidence": 0.95, "synonyms": []}
{"id": "anton_repo.query-relevant-knowledge", "type": "function", "name": "query_relevant_knowledge", "summary": "", "formal": null, "examples": [], "source": {"section_path": ["server/agent/knowledge_store.py"], "pages": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.qwen30binstruct", "type": "definition", "name": "Qwen30BInstruct", "summary": "Identifies the Qwen30B model variant for instruct mode. Corresponds to the model string 'qwen3:30b-a3b-instruct-2507-q4_K_M' used in configuration.", "formal": "qwen3:30b-a3b-instruct-2507-q4_K_M", "examples": [{"input": "QWEN_30B_INSTRUCT", "output": "qwen3:30b-a3b-instruct-2507-q4_K_M"}], "source": {"section_path": ["server/config.py"], "pages": [1]}, "tags": ["anton_repo"], "confidence": 0.95, "synonyms": []}
{"id": "anton_repo.qwen30bthinking", "type": "definition", "name": "Qwen30BThinking", "summary": "Identifies the Qwen30B model variant for thinking mode. Corresponds to the model string 'qwen3:30b-a3b-thinking-2507-q4_K_M' used in configuration.", "formal": "qwen3:30b-a3b-thinking-2507-q4_K_M", "examples": [{"input": "QWEN_30B_THINKING", "output": "qwen3:30b-a3b-thinking-2507-q4_K_M"}], "source": {"section_path": ["server/config.py"], "pages": [1]}, "tags": ["anton_repo"], "confidence": 0.95, "synonyms": []}
{"id": "anton_repo.rag-top-k-nodes", "type": "algorithm", "name": "RAG Top K Nodes", "summary": "Retrieves top-k nodes related to a query within a specific pack.", "formal": "def rag_topk_nodes(rag_manager: Any, query: str, pack_name: str, topk: int) -> List[str]", "examples": [{"input": "rag_manager, 'query', 'pack1', 5", "output": ["node1", "node2"]}], "source": {"section_path": ["server/agent/concept_graph.py"], "pages": [1, 2, 3, 4]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.react-agent", "type": "definition", "name": "ReAct Agent", "summary": "A class implementing the ReAct agent pattern for LLM interaction with tool execution and direct reasoning.", "formal": "class ReActAgent", "examples": [], "source": {"section_path": ["server/agent/react_agent.py"], "pages": [4, 5]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.react-system-prompt", "type": "algorithm", "name": "ReAct System Prompt", "summary": "Dynamically generates ReAct agent system prompt incorporating knowledge, tools, and usage rules with structured formatting", "formal": "def get_react_system_prompt(self, user_prompt: str) -> str", "examples": [{"input": "user_prompt=\"What's the weather?\"", "output": "System prompt containing 'Available Tools', 'Coding Rules', and 'Final Answer:' structure"}], "source": {"section_path": ["server/agent/react_agent.py"], "pages": [1, 2, 3]}, "tags": ["anton_repo"], "confidence": 0.95, "synonyms": ["ReAct Agent Prompt", "System Prompt Generator"]}
{"id": "anton_repo.readfile-api", "type": "algorithm", "name": "ReadFile API", "summary": "Reads a file within the project directory, sanitizing content to prevent XSS.", "formal": "def read_file(file_path: str) -> str", "examples": [{"input": {"file_path": "data/file.txt"}, "output": "Hello &lt;world&gt;"}], "source": {"section_path": ["server/agent/tools/file_management.py"], "pages": [1, 2, 3, 4, 5]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.rebuild-code-index", "type": "algorithm", "name": "rebuild_code_index", "summary": "Requires 'confirm' set to true to rebuild the code index, returning status messages for success or confirmation error.", "formal": "def run(self, arguments: dict) -> str", "examples": [{"input": {"confirm": false}, "output": "⚠️ Rebuild not performed..."}, {"input": {"confirm": true}, "output": "✅ Successfully rebuilt code index"}], "source": {"section_path": ["server/agent/tools/rebuild_index_tool.py"], "pages": [1, 2]}, "tags": ["anton_repo"], "confidence": 0.9, "synonyms": ["reset_index", "rebuild_index"]}
{"id": "anton_repo.rebuild-code-index-api", "type": "definition", "name": "rebuild_code_index API", "summary": "Defines required 'confirm' boolean parameter for index rebuild operations.", "formal": {"name": "rebuild_code_index", "parameters": {"type": "object", "properties": {"confirm": {"type": "boolean"}}, "required": ["confirm"]}}, "examples": [{"input": {"confirm": true}, "output": "Parameters validated"}], "source": {"section_path": ["server/agent/tools/rebuild_index_tool.py"], "pages": [1, 2]}, "tags": ["anton_repo"], "confidence": 0.95, "synonyms": ["rebuild_code_index schema"]}
{"id": "anton_repo.refresh-index", "type": "algorithm", "name": "refresh_index", "summary": "Refreshes the index by pulling the latest changes from Git and re-indexing all files in the current directory.", "formal": "refresh_index(self) -> int", "examples": [], "source": {"section_path": ["server/agent/code_indexer.py"], "pages": [9, 10, 11, 12, 13]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.reload-tools", "type": "algorithm", "name": "Reload Tools", "summary": "Reloads tool modules from filesystem and refreshes the tool list via get_all_tools.", "formal": "def reload_tools() -> List[Any]", "examples": [{"input": "reload_tools()", "output": "['SearchTool', 'Calculator']"}], "source": {"section_path": ["server/agent/tools/tool_defs.py"], "pages": [1, 2, 3, 4]}, "tags": ["anton_repo"], "confidence": 0.9, "synonyms": []}
{"id": "anton_repo.resource-usage", "type": "algorithm", "name": "Resource Usage", "summary": "Captures current CPU, RAM, and GPU VRAM usage. Falls back to N/A for GPU if NVML is not initialized or fails.", "formal": "def get_resource_usage(self) -> dict", "examples": [{"input": "metrics_tracker.get_resource_usage()", "output": "{\"cpu_percent\": 45.2, \"ram_percent\": 78.3, \"gpu_percent\": 65, \"vram_percent\": 42.1}"}], "source": {"section_path": ["metrics.py"], "pages": [1, 2, 3, 4, 5]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.resourceusage", "type": "definition", "name": "ResourceUsage", "summary": "A dictionary representing system resource usage, containing CPU and RAM percentages and an empty list for GPU stats.", "formal": "{\"cpu_percent\": float, \"ram_percent\": float, \"gpus\": []}", "examples": [{"input": "", "output": "{\"cpu_percent\": 25.3, \"ram_percent\": 45.8, \"gpus\": []}"}], "source": {"section_path": ["server/model_server.py"], "pages": [1, 2, 3, 4]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.secure-execution-isolation", "type": "rule", "name": "Secure Execution Isolation", "summary": "Code execution is isolated in a Docker container, preventing access to host resources.", "formal": null, "examples": [{"input": "print('test')", "output": "Isolated container execution"}], "source": {"section_path": ["server/agent/tools/coding.py"], "pages": [1, 2]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.select-pack-by-embedding", "type": "function", "name": "select_pack_by_embedding", "summary": "", "formal": null, "examples": [], "source": {"section_path": ["server/agent/knowledge_store.py"], "pages": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.singleton-pattern", "type": "definition", "name": "Singleton Pattern", "summary": "Ensures only one instance of RAGManager is created, with thread-safe initialization using a class-level lock.", "formal": "class RAGManager (singleton)", "examples": [{"input": "RAGManager()", "output": "Single instance returned"}], "source": {"section_path": ["server/agent/rag_manager.py"], "pages": [1, 2, 3, 4, 5, 6, 7, 8, 9]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.slugify", "type": "concept", "name": "Slugify", "summary": "", "formal": null, "examples": [], "source": {"section_path": ["learning/concept_extractor.py"], "pages": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.split-into-paragraphs", "type": "function", "name": "split_into_paragraphs", "summary": "", "formal": null, "examples": [{"input": "Para1\\n\\nPara2", "output": ["Para1", "Para2"]}], "source": {"section_path": ["learning/pdf_importer.py"], "pages": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.start", "type": "algorithm", "name": "start", "summary": "Starts the background refresh thread if not already running.", "formal": "def start(self) -> None", "examples": [{"input": "refresher.start()", "output": "None"}], "source": {"section_path": ["server/agent/code_index_refresher.py"], "pages": [1, 2, 3, 4, 5, 6, 7]}, "tags": ["anton_repo"], "confidence": 0.95, "synonyms": []}
{"id": "anton_repo.start-learning-task", "type": "function", "name": "start_learning_task", "summary": "", "formal": null, "examples": [], "source": {"section_path": ["server/agent/knowledge_store.py"], "pages": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.stop", "type": "algorithm", "name": "stop", "summary": "Stops the background refresh thread if running.", "formal": "def stop(self) -> None", "examples": [{"input": "refresher.stop()", "output": "None"}], "source": {"section_path": ["server/agent/code_index_refresher.py"], "pages": [1, 2, 3, 4, 5, 6, 7]}, "tags": ["anton_repo"], "confidence": 0.95, "synonyms": []}
{"id": "anton_repo.streamresponse", "type": "algorithm", "name": "StreamResponse", "summary": "", "formal": null, "examples": [{"input": "user_prompt='Hello', chat_history=None", "output": "{\"type\": \"token\", \"content\": \"Hello\"}"}], "source": {"section_path": ["client/anton_client.py"], "pages": [1, 2, 3]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.study-epoch", "type": "method", "name": "study_epoch", "summary": "", "formal": null, "examples": [], "source": {"section_path": ["server/agent/self_study.py"], "pages": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.summarizer-prompt", "type": "definition", "name": "Summarizer Prompt", "summary": "Template for the summarizer agent to condense long texts into concise summaries.", "formal": "Requires {text_to_summarize}; output must be a short summary.", "examples": [{"input": {"text_to_summarize": "The quick brown fox jumps over the lazy dog. This sentence contains all the letters of the alphabet."}, "output": "A sentence containing all letters of the alphabet."}], "source": {"section_path": ["prompts.py"], "pages": [1]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.text-normalization-regex", "type": "regex", "name": "text_normalization_regex", "summary": "", "formal": null, "examples": [{"input": "  Text  ", "output": "Text"}], "source": {"section_path": ["learning/pdf_importer.py"], "pages": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.thread-safe-operations", "type": "rule", "name": "Thread-Safe Operations", "summary": "All critical operations (add, save, rebuild) use an instance-level lock to ensure concurrency safety.", "formal": "with self._operation_lock: ...", "examples": [{"input": "add_knowledge('text', 'source')", "output": "Execution locked to prevent race conditions"}], "source": {"section_path": ["server/agent/rag_manager.py"], "pages": [1, 2, 3, 4, 5, 6, 7, 8, 9]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.tool-compact-formatting", "type": "algorithm", "name": "Tool Compact Formatting", "summary": "Formats tool descriptions into concise, non-bloated strings for prompt inclusion while preserving key parameters", "formal": "def _format_tools_compact(self) -> str", "examples": [{"input": "tools=[{\"name\":\"weather\",\"description\":\"Get weather info\",\"params\":{\"location\":\"str\"}}]", "output": "- weather: Get weather info, Parameters: {\"location\":\"str\"}"}], "source": {"section_path": ["server/agent/react_agent.py"], "pages": [1, 2, 3]}, "tags": ["anton_repo"], "confidence": 0.9, "synonyms": ["Tool Description Minification", "Prompt-Optimized Tool Formatting"]}
{"id": "anton_repo.tool-result-callback", "type": "algorithm", "name": "Tool Result Callback", "summary": "Captures tool results for UI streaming and records tool use in the learning loop.", "formal": "def tool_result_callback(tool_result_summary: dict) -> None", "examples": [{"input": "{\"name\": \"search\", \"arguments\": {\"query\": \"hello\"}, \"status\": \"success\"}", "output": "None"}], "source": {"section_path": ["server/agent/react_agent.py"], "pages": [4, 5]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.toolcreationapi", "type": "definition", "name": "ToolCreationAPI", "summary": "API contract for creating a new tool via the agent, specifying required parameters and their types.", "formal": "create_new_tool(tool_name: str, tool_code: str)", "examples": [{"input": "{\"tool_name\": \"file_writer\", \"tool_code\": \"class FileWriter: pass\"}", "output": "\"✅ Success: Tool 'file_writer' created and loaded. It is now available.\""}], "source": {"section_path": ["server/agent/tools/tool_creation/tool_creator.py"], "pages": [1, 2]}, "tags": ["anton_repo"], "confidence": 0.95, "synonyms": ["CreateToolAPI", "ToolCreationContract"]}
{"id": "anton_repo.toolcreator-run", "type": "algorithm", "name": "ToolCreator Run", "summary": "Implementation that creates a new tool by registering a Python class dynamically, sanitizing the tool name, and returning a success message.", "formal": "run(tool_name: str, tool_code: str) -> str", "examples": [{"input": "{\"tool_name\": \"test\", \"tool_code\": \"class Test: pass\"}", "output": "\"✅ Success: Tool 'test' created and loaded. It is now available.\""}], "source": {"section_path": ["server/agent/tools/tool_creation/tool_creator.py"], "pages": [1, 2]}, "tags": ["anton_repo"], "confidence": 0.95, "synonyms": ["CreateTool", "DynamicToolRegistration"]}
{"id": "anton_repo.validate-tool-compatibility", "type": "algorithm", "name": "validate_tool_compatibility", "summary": "Checks if a tool meets the specified version requirements.", "formal": "def validate_tool_compatibility(self, tool_name: str, required_version: str) -> bool", "examples": [{"input": "validate_tool_compatibility(tool_name=\"tool1\", required_version=\"1.0\")", "output": true}], "source": {"section_path": ["server/agent/tools/tool_loader.py"], "pages": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.verifier-function-contract", "type": "definition", "name": "Verifier Function Contract", "summary": "A verifier function must accept a VerifyRequest and return a VerifyResult or None. Domain names are normalized to lowercase for registry lookup.", "formal": "Callable[[VerifyRequest], Optional[VerifyResult]]", "examples": [{"input": "def verify(req: VerifyRequest) -> VerifyResult: ...", "output": "Valid verifier function"}], "source": {"section_path": ["server/agent/verifiers/base.py"], "pages": [1, 2, 3, 4]}, "tags": ["anton_repo"], "confidence": 0.95, "synonyms": ["Verifier Signature", "Verification Function Type"]}
{"id": "anton_repo.verifier-prompt", "type": "definition", "name": "Verifier Prompt", "summary": "Template for the verifier agent to assess if an assistant's answer meets the original user goal, outputting a JSON with 'is_sufficient' and 'critique'.", "formal": "Requires {original_prompt}, {generated_answer}; output must be a JSON object with keys 'is_sufficient' (boolean) and 'critique' (string).", "examples": [{"input": {"original_prompt": "What is the capital of France?", "generated_answer": "Paris"}, "output": "{\"is_sufficient\": true, \"critique\": \"Answer is correct and complete.\"}"}], "source": {"section_path": ["prompts.py"], "pages": [1]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.verify-request-routing", "type": "algorithm", "name": "Verify Request Routing", "summary": "Routes a verification request to the first applicable verifier based on domain. Falls back to wildcard domain '*' if no specific domain matches. Returns UNKNOWN if no verifiers are available.", "formal": "def verify(req: VerifyRequest) -> VerifyResult", "examples": [{"input": "VerifyRequest(domain='example.com')", "output": "VerifyResult(verdict=Verdict.UNKNOWN, ...)"}], "source": {"section_path": ["server/agent/verifiers/base.py"], "pages": [1, 2, 3, 4]}, "tags": ["anton_repo"], "confidence": 0.95, "synonyms": ["Verification Request Handler", "Domain-Based Routing"]}
{"id": "anton_repo.websearchtool-function-schema", "type": "definition", "name": "WebSearchTool Function Schema", "summary": "", "formal": "query: str (required), num_results: int (optional, default=3)", "examples": [{"input": "{\"query\": \"AI\"}", "output": "valid"}], "source": {"section_path": ["server/agent/tools/web_search.py"], "pages": [1, 2]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.websearchtool-run", "type": "algorithm", "name": "WebSearchTool Run", "summary": "", "formal": "run(query: str, num_results: int = 3) -> string (JSON)", "examples": [{"input": "{\"query\": \"AI\", \"num_results\": 2}", "output": "[{\"title\": \"Example Title\", \"url\": \"https://example.com\", \"description\": \"Example description.\"}]"}], "source": {"section_path": ["server/agent/tools/web_search.py"], "pages": [1, 2]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
{"id": "anton_repo.welcome-screen-configuration", "type": "definition", "name": "Welcome Screen Configuration", "summary": "The welcome screen content is defined by the `chainlit.md` file in the project root. An empty file disables the welcome screen.", "formal": "File: `chainlit.md` (project root directory)", "examples": [{"input": "Hello", "output": "Welcome screen displays 'Hello'"}, {"input": "", "output": "No welcome screen displayed"}], "source": {"section_path": ["chainlit.md"], "pages": [1]}, "tags": ["anton_repo"], "confidence": 0.9, "synonyms": ["Welcome Message", "Initial Screen"]}
{"id": "anton_repo.write-file", "type": "algorithm", "name": "write_file", "summary": "Anton's core file operation tool for creating or modifying project files by writing content to a specified path. Enables generation of files like READMEs through direct file system access.", "formal": "def write_file(path: str, content: str) -> None", "examples": [{"input": "write_file('README.md', '# Anton Project')", "output": "File written to README.md"}], "source": {"section_path": ["README.md"], "pages": [1]}, "tags": ["anton_repo"], "confidence": 0.9, "synonyms": []}
{"id": "anton_repo.writefile-api", "type": "algorithm", "name": "WriteFile API", "summary": "Writes content to a file within the project directory, creating parent directories as needed.", "formal": "def write_file(file_path: str, content: str) -> str", "examples": [{"input": {"file_path": "data/file.txt", "content": "Hello"}, "output": "✅ Successfully wrote 5 characters to 'data/file.txt'."}], "source": {"section_path": ["server/agent/tools/file_management.py"], "pages": [1, 2, 3, 4, 5]}, "tags": ["anton_repo"], "confidence": 0.0, "synonyms": []}
