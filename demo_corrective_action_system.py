#!/usr/bin/env python3
"""
COMPREHENSIVE CORRECTIVE ACTION SYSTEM DEMO
============================================

This script demonstrates the complete tool failure learning system with
immediate corrective action. It shows:

1. ‚úÖ Immediate tool failure recording
2. ‚úÖ Dedicated knowledge storage
3. ‚úÖ Linking failures to solutions  
4. ‚úÖ Learning retrieval during execution
5. ‚úÖ Deduplication of learning patterns
6. ‚úÖ CORRECTIVE ACTION: Immediate alternative suggestions when tools fail

The system now provides IMMEDIATE corrective action when tools fail,
suggesting high-confidence alternatives based on past learnings.
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'server'))

from agent.tool_learning_store import ToolLearningStore, ToolOutcome, ToolLearning
import tempfile
import json
import time
import uuid

def demonstrate_corrective_action_system():
    """Comprehensive demonstration of the corrective action system"""
    
    with tempfile.NamedTemporaryFile(suffix='.db', delete=False) as f:
        db_path = f.name
    
    try:
        store = ToolLearningStore(db_path)
        
        print("üéØ COMPREHENSIVE CORRECTIVE ACTION SYSTEM DEMO")
        print("=" * 60)
        print(__doc__)
        
        # ================================
        # PHASE 1: SETUP LEARNING PATTERNS
        # ================================
        print("\nüìö PHASE 1: Creating diverse learning patterns...")
        print("-" * 50)
        
        patterns = [
            {
                "failure_pattern": "git clone fails with 'Repository already exists'",
                "successful_alternative": "git pull origin main",
                "confidence": 0.95,
                "context": "git repository update existing directory",
                "tools": ["git"]
            },
            {
                "failure_pattern": "file read fails with 'File not found'",
                "successful_alternative": "search_codebase first, then read_file",
                "confidence": 0.88,
                "context": "file access search before read",
                "tools": ["read_file", "search_codebase"]
            },
            {
                "failure_pattern": "docker build fails with 'permission denied'",
                "successful_alternative": "sudo docker build",
                "confidence": 0.92,
                "context": "docker permissions unix sudo",
                "tools": ["docker"]
            }
        ]
        
        for i, pattern in enumerate(patterns, 1):
            learning = ToolLearning(
                learning_id=str(uuid.uuid4()),
                failure_pattern=pattern["failure_pattern"],
                successful_alternative=pattern["successful_alternative"],
                confidence=pattern["confidence"],
                context_pattern=pattern["context"],
                tool_names_involved=pattern["tools"],
                created_timestamp=time.time(),
                last_confirmed_timestamp=time.time(),
                confirmation_count=1,
                llm_analysis=f"Analysis: {pattern['failure_pattern']} -> {pattern['successful_alternative']}"
            )
            store._store_learning(learning)
            print(f"   ‚úÖ Pattern {i}: {pattern['successful_alternative']} (confidence: {pattern['confidence']:.0%})")
        
        # ================================
        # PHASE 2: TRIGGER CORRECTIVE ACTIONS
        # ================================
        print(f"\nüîß PHASE 2: Testing corrective action triggers...")
        print("-" * 50)
        
        test_scenarios = [
            {
                "name": "Git Clone Failure",
                "tool_name": "git",
                "args": {"command": "clone", "url": "https://github.com/user/repo.git"},
                "error": "Error: Repository already exists",
                "expected_alternative": "git pull origin main"
            },
            {
                "name": "File Read Failure", 
                "tool_name": "read_file",
                "args": {"path": "/nonexistent/file.py"},
                "error": "Error: File not found",
                "expected_alternative": "search_codebase first, then read_file"
            },
            {
                "name": "Docker Build Failure",
                "tool_name": "docker",
                "args": {"action": "build", "dockerfile": "./Dockerfile"},
                "error": "Error: permission denied",
                "expected_alternative": "sudo docker build"
            },
            {
                "name": "Unrelated Failure (No Learning)",
                "tool_name": "database",
                "args": {"query": "SELECT * FROM users"},
                "error": "Error: Connection timeout",
                "expected_alternative": None
            }
        ]
        
        for scenario in test_scenarios:
            print(f"\nüß™ Testing: {scenario['name']}")
            
            # Start new conversation
            conv_id = f"conv_{scenario['name'].lower().replace(' ', '_')}"
            store.start_conversation(conv_id)
            
            # Trigger the failure
            exec_id, suggested_alternatives = store.record_tool_execution(
                tool_name=scenario["tool_name"],
                arguments=scenario["args"],
                result=scenario["error"],
                outcome=ToolOutcome.FAILURE,
                execution_id=str(uuid.uuid4())
            )
            
            print(f"   üìã Execution: {exec_id}")
            print(f"   ü§ñ Suggestions: {len(suggested_alternatives)}")
            
            if suggested_alternatives:
                print("   üí° CORRECTIVE ACTION TRIGGERED:")
                for alt in suggested_alternatives:
                    print(f"      ‚û§ {alt.successful_alternative} (confidence: {alt.confidence:.0%})")
                    
                    # Verify we got the expected alternative
                    if scenario["expected_alternative"] and scenario["expected_alternative"] in alt.successful_alternative:
                        print("      ‚úÖ Expected alternative found!")
                    
                # Simulate the corrective action message format
                alternatives_text = "\n".join([
                    f"‚Ä¢ {alt.successful_alternative} (confidence: {alt.confidence:.1%})"
                    for alt in suggested_alternatives[:3]
                ])
                
                print(f"   üí¨ Tool Result Message:")
                tool_result = f"‚ùå Error: {scenario['error']}\n\nü§ñ **CORRECTIVE ACTION SUGGESTED:**\nBased on past learnings, try these alternatives:\n{alternatives_text}\n\nThe original {scenario['tool_name']} approach failed, but these alternatives have worked in similar situations."
                print(f"      {tool_result.replace(chr(10), chr(10) + '      ')}")
                
            else:
                if scenario["expected_alternative"] is None:
                    print("   ‚úÖ No corrective action (as expected for unrelated failure)")
                else:
                    print("   ‚ùå Expected corrective action but none was triggered!")
        
        # ================================
        # PHASE 3: DEMONSTRATE DEDUPLICATION
        # ================================
        print(f"\nüîÑ PHASE 3: Testing deduplication prevents duplicates...")
        print("-" * 50)
        
        store.start_conversation("conv_dedup_test")
        
        # Try to trigger the same failure multiple times
        for i in range(3):
            exec_id, alternatives = store.record_tool_execution(
                tool_name="git",
                arguments={"command": "clone", "url": f"https://github.com/user/repo{i}.git"},
                result="Error: Repository already exists",
                outcome=ToolOutcome.FAILURE,
                execution_id=str(uuid.uuid4())
            )
            print(f"   üîÅ Attempt {i+1}: {len(alternatives)} suggestion(s)")
        
        # ================================
        # PHASE 4: QUERY LEARNING SYSTEM
        # ================================
        print(f"\nüìä PHASE 4: Querying the learning system...")
        print("-" * 50)
        
        # Test querying for git-related learnings
        git_learnings = store.query_relevant_learnings("git", {"command": "clone"})
        print(f"   üîç Git-related learnings: {len(git_learnings)}")
        
        for learning in git_learnings:
            print(f"      ‚û§ {learning.successful_alternative} (confidence: {learning.confidence:.0%})")
        
        # ================================
        # SUMMARY
        # ================================
        print(f"\nüéâ SYSTEM DEMONSTRATION COMPLETE!")
        print("=" * 60)
        print("‚úÖ CORRECTIVE ACTION SYSTEM FEATURES VERIFIED:")
        print("   üî¥ Immediate failure recording")
        print("   üíæ Persistent learning storage")
        print("   üîó Pattern-based failure-solution linking")
        print("   üß† Intelligent learning retrieval")
        print("   üö´ Duplicate prevention with deduplication")
        print("   ‚ö° IMMEDIATE corrective action suggestions")
        print("   üí¨ Rich user-facing error messages with alternatives")
        print("   üéØ High-confidence alternative recommendations")
        
        print(f"\nüèÜ The tool learning system now provides IMMEDIATE")
        print(f"   corrective action when tools fail, suggesting proven")
        print(f"   alternatives from past successful experiences!")
        
        return True
        
    finally:
        try:
            os.unlink(db_path)
        except:
            pass

if __name__ == "__main__":
    demonstrate_corrective_action_system()
    print(f"\n‚ú® Demo complete! The corrective action system is ready to help users")
    print(f"   recover from tool failures with intelligent alternative suggestions.")
